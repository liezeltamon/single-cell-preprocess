# mamba activate snakemake; module load R/4.3.2-gfbf-2023a
# sbatch -J proc_agg -p short,long --mem=50G --cpus-per-task=2 --output=%x.log.out --error=%x.log.err --wrap="snakemake -s Snakefile --cores 2 -j 2"
# ../../../../results/process_droplets_pipeline/config

# %%
import os
import sys
import shutil
sys.path.append("scripts/utils")
from utils import params_to_cli_args

# %%
import os

# %% Parameters

PROJECT_DIR = os.path.abspath("../../../..")
DATA_DIR = os.path.join(PROJECT_DIR, "data", "cellranger")
#DATA_DIR_SUFFIX = "outs/multi/count/raw_feature_bc_matrix"
DATA_DIR_SUFFIX = "outs/multi/count/raw_feature_bc_matrix.h5"
HTOMAPPING_DIR = os.path.join(PROJECT_DIR, "results", "process_droplets", "hto_to_sample_mapping")
CONFIG_FILENAME = "config"

CONFIG_PATH = os.path.join("../config", f"{CONFIG_FILENAME}.yml")
RESULTS_DIR = os.path.join(PROJECT_DIR, "results", "process_droplets_pipeline1", CONFIG_FILENAME)
SAMPLES = [d for d in os.listdir(DATA_DIR) if os.path.isdir(os.path.join(DATA_DIR, d))]

# %% ----- MAIN -----

# Create RESULTS_DIR and copy config file
os.makedirs(RESULTS_DIR, exist_ok=True)
shutil.copy(CONFIG_PATH, os.path.join(RESULTS_DIR, f"{CONFIG_FILENAME}.yml"))

# Load configuration

configfile: CONFIG_PATH

# Load rules

include: "rules/empty_emptydrops.smk"
include: "rules/dehash_cellhashr.smk"
include: "rules/doublet_scdblfinder.smk"
include: "rules/filter_conventional.smk"
include: "rules/qc_sc_sample.smk"
include: "rules/qc_sc_aggregate.smk"

# Optional messages, log and error handling

onstart:
    print("\n--- Analysis started ---\n")


onsuccess:
    print("\n--- Workflow finished! ---\n")


onerror:
    print("\n--- An error occurred! ---\n")


# Target rules
rule all:
    input:
        # Outputs from empty_emptydrops
        expand(
            os.path.join(RESULTS_DIR, "empty", "{sample}", "{filename}"),
            sample=SAMPLES,
            filename=[
                "blacklist.txt",
                "output.qs",
                "plots.pdf",
                "session_info.txt",
                "whitelist.txt"
            ]
        ),
        # Outputs from dehash_cellhashr
        expand(
            os.path.join(RESULTS_DIR, "dehash", "{sample}", "{filename}"),
            sample=SAMPLES,
            filename=[
                "barcode_metadata.csv",
                "metrics.csv",
                "output.csv",
                "plots.pdf",
                "session_info.txt",
                "whitelist.txt"
            ]
        ),
        # Outputs from doublet_scdblfinder
        expand(
            os.path.join(RESULTS_DIR, "doublet", "{sample}", "{filename}"),
            sample=SAMPLES,
            filename=[
                "barcode_metadata.csv",
                "output.qs",
                "plots.pdf",
                "session_info.txt",
                "whitelist.txt"
            ]
        ),
        # Outputs from filter_conventional
        expand(
            os.path.join(RESULTS_DIR, "filter", "{sample}", "{filename}"),
            sample=SAMPLES,
            filename=[
                "barcode_metadata.csv",
                "plots.pdf",
                "session_info.txt",
                "whitelist.txt"
            ]
        ),
        # Outputs from qc_sc_sample
        expand(
            os.path.join(RESULTS_DIR, "qc_sc_sample", "{sample}", "{filename}"),
            sample=SAMPLES,
            filename=[
                "metrics.csv",
                "plots.pdf"
            ]
        ),
        # Outputs from qc_sc_aggregate
        os.path.join(RESULTS_DIR, "qc_sc_aggregate", "heatmaps.pdf"),
        os.path.join(RESULTS_DIR, "qc_sc_aggregate", "metrics.csv")
